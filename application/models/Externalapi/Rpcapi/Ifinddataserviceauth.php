<?php
/**
 * Created by PhpStorm.
 * User: l.gang06@yahoo.com
 * Date: 2017/3/23
 * Time: 16:58
 */
namespace Externalapi\Rpcapi;
use Api\Globals\Defined;
use Rpc\RpchttpModel;
class IfinddataserviceauthModel extends RpchttpModel
{
    private $_timeoutMax = 6;
    /**
     * @param array $params
     *      userName
     *      pwd
     *      sql
     *      dataType php|json default php
     *      old: default 0
     *      dbType : pgsql|mysql default pgsql
     *      set 设置查询时环境变量的设置 array()|json字符串 $set
     *      timeout 超时时间，默认3s最大6s
     * @param $visitType
     *        1 sql
     *        2 存储过程 （预留暂不支持）
     *
     * @return json
     */

    public function send($params = array(), $visitType = 1)
    {
        if (is_string($params)) {
            $params = json_decode($params, true);
        }
        if (!isset($params['userName']) || !isset($params['pwd'])) {
            $returnData = array(
                'errorcode' => Defined::CODE_API_PARAM_CHECK_FAILED,
                'errormsg' => Defined::MSG_API_PARAM_CHECK_FAILED_IFINDSERVICEAUTH
            );
            return json_encode($returnData);
        }
        if (isset($params['timeout']) && $params['timeout'] > 0 && $params['timeout'] <= $this->_timeoutMax) {
            $this->_setTimeout($params['timeout']);
        }
        if ($visitType != 1) {
            $returnData = array(
                'errorcode' => Defined::CODE_API_PARAM_CHECK_FAILED,
                'errormsg' => '暂不支持存储其他方式'
            );
            return json_encode($returnData);
        }
        switch ($visitType)
        {
            case 1:
            default:
                return $this->_sql($params);
        }
    }

    protected function _sql($params)
    {
        if (!isset($params['sql'])) {
            $returnData = array(
                'errorcode' => Defined::CODE_API_PARAM_CHECK_FAILED,
                'errormsg' => Defined::MSG_API_PARAM_CHECK_FAILED_IFINDSERVICEAUTH . ';sql'
            );
            return json_encode($returnData);
        }
        $newParams = $this->_processing($params);
        $this->_returnType = $newParams['AppReturn'];
        return parent::send($newParams); // @TODO: Change the autogenerated stub
    }

    /**
     * @param $sql加工数据
     */
    protected function _processing($params)
    {
        $newParams['UserName'] = $params['userName'];
        $newParams['PWD'] = $params['pwd'];
        $newParams['AppSQL'] = isset($params['sql']) ? $params['sql'] : '';
        $newParams['AppReturn'] = isset($params['dataType']) ? $params['dataType'] : self::DATATYPE_PHP;
        $newParams['OLD'] = isset($params['old']) ? $params['old'] : 0;
        $newParams['dbtype'] = isset($params['dbType']) ? $params['dbType'] : 'pgsql';
        if (isset($params['set'])) {
            if (is_array($params['set'])) {
                $newParams['set'] = json_encode($params['set']);
            } else {
                $newParams['set'] = $params['set'];
            }
        }
        foreach ($params as $key => $val) {
            if ($key{0} == '@') {
                $newParams[$key] = $val;
            }
        }
        return $newParams;
    }

    protected function _errorCodeKeyMap()
    {
        return 'Error';
    }

    protected function _errorCodeSuccessVal()
    {
        return 'APP-100001';
    }

    protected function _errorMsgKeyMap()
    {
        return 'Message';
    }

    protected function _resultDataMap()
    {
        return 'Data';
    }
}